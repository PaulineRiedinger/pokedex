let currentPokemon = 1; // Stocke l'ID du Pok√©mon actuellement affich√©

// Fonction pour r√©cup√©rer les donn√©es d'un Pok√©mon depuis l'API
async function getPokemonData(id) {
  // Effectue une requ√™te √† l'API Pok√©mon en utilisant l'ID fourni
  const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);

  // Retourne les donn√©es JSON de la r√©ponse
  return await response.json();
}

// Fonction pour mettre √† jour l'affichage du Pok√©mon sur la page
function updatePokemonDisplay(data) {
  // Met √† jour le nom du Pok√©mon en majuscules
  document.getElementById("name").textContent = data.name.toUpperCase();

  // Met √† jour l'image du Pok√©mon (sprite)
  document.getElementById("sprite").src =
    data.sprites.versions["generation-v"]["black-white"].front_default;

  // Met √† jour l'ID du Pok√©mon sous forme de texte
  document.getElementById("id").textContent = `#${data.id}`;
}

/**
 * Conseil : S√©parer les responsabilit√©s
 *
 * Il est important de s√©parer les diff√©rentes t√¢ches dans des fonctions distinctes :
 * - La fonction `getPokemonData` est responsable de la r√©cup√©ration des donn√©es depuis l'API.
 * - La fonction `updatePokemonDisplay` s'occupe uniquement de mettre √† jour l'affichage du DOM.
 *
 * Cette approche permet d'am√©liorer la lisibilit√©, la r√©utilisabilit√© et la maintenabilit√© du code.
 * Si une modification est n√©cessaire dans l'une des fonctionnalit√©s (r√©cup√©rer les donn√©es ou afficher les informations),
 * elle peut √™tre effectu√©e sans affecter l'autre partie du code.
 */

// Fonction principale pour charger un Pok√©mon et mettre √† jour l'affichage
async function loadPokemon(id) {
  // R√©cup√®re les donn√©es du Pok√©mon en utilisant l'ID
  const data = await getPokemonData(id);

  // Met √† jour l'affichage avec les donn√©es r√©cup√©r√©es
  updatePokemonDisplay(data);
}

/**
 * Conseil : Utilisation d'`await` pour √©viter les probl√®mes de rendu asynchrone
 *
 * Lorsque des op√©rations asynchrones sont effectu√©es, comme la r√©cup√©ration des donn√©es de l'API,
 * il est crucial d'utiliser `await` pour s'assurer que ces op√©rations sont termin√©es avant de continuer.
 * Sans `await`, il y a un risque que le DOM soit mis √† jour avant que les donn√©es ne soient enti√®rement r√©cup√©r√©es,
 * ce qui peut entra√Æner des erreurs d'affichage.
 * L'utilisation de `await` garantit que le processus d'affichage se d√©roule dans le bon ordre et de mani√®re fiable.
 */

// Fonction pour afficher le Pok√©mon suivant
async function nextPokemon() {
  // V√©rifie que l'ID ne d√©passe pas 151 (limite de la premi√®re g√©n√©ration ü©∑)
  if (currentPokemon < 151) {
    currentPokemon++; // Incr√©mente l'ID du Pok√©mon
    await loadPokemon(currentPokemon); // Charge et affiche le Pok√©mon suivant
  }
}

// Fonction pour afficher le Pok√©mon pr√©c√©dent
async function prevPokemon() {
  // V√©rifie que l'ID ne descend pas en dessous de 1
  if (currentPokemon > 1) {
    currentPokemon--; // D√©cr√©mente l'ID du Pok√©mon
    await loadPokemon(currentPokemon); // Charge et affiche le Pok√©mon pr√©c√©dent
  }
}

/**
 * Conseil : Charger dynamiquement le premier Pok√©mon
 *
 * Il est pr√©f√©rable de charger dynamiquement le premier Pok√©mon via la fonction `loadPokemon(currentPokemon)`
 * plut√¥t que de d√©finir manuellement une valeur initiale dans le DOM. Cela permet de garder une logique uniforme
 * dans le processus d'affichage des Pok√©mon, et facilite les modifications futures si la source des donn√©es change
 * ou si la logique de d√©marrage doit √™tre ajust√©e.
 */

// Charge et affiche le premier Pok√©mon au d√©marrage de la page
loadPokemon(currentPokemon);
